{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n  },\n};\n\nconst dateInput = flatpickr(document.querySelector(\"#datetime-picker\"), options)\n\nconst startButton = document.querySelector('[data-start]');\n\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet countdownInterval;\n\nstartButton.addEventListener('click', () => {\n  const currentDate = new Date();\n  const targetDate = dateInput.latestSelectedDateObj\n\n  if (!targetDate || targetDate <= currentDate) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please select a future date and time'\n    });\n    return;\n  }\n\n  updateCountdown(targetDate);\n\n  clearInterval(countdownInterval);\n\n  countdownInterval = setInterval(() => {\n    updateCountdown(targetDate);\n  }, 1000);\n});\n\nfunction updateCountdown(targetDate) {\n  const now = new Date();\n  const timeLeft = targetDate - now;\n\n  if (timeLeft <= 0) {\n    clearInterval(countdownInterval);\n    return;\n  }\n\n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n\n  daysSpan.textContent = String(days).padStart(2, '0');\n  hoursSpan.textContent = String(hours).padStart(2, '0');\n  minutesSpan.textContent = String(minutes).padStart(2, '0');\n  secondsSpan.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["options","selectedDates","dateInput","flatpickr","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdownInterval","currentDate","targetDate","iziToast","updateCountdown","timeLeft","days","hours","minutes","seconds"],"mappings":"+IAKA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC7B,CACH,EAEMC,EAAYC,EAAU,SAAS,cAAc,kBAAkB,EAAGH,CAAO,EAEzEI,EAAc,SAAS,cAAc,cAAc,EAEnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAEJL,EAAY,iBAAiB,QAAS,IAAM,CAC1C,MAAMM,EAAc,IAAI,KAClBC,EAAaT,EAAU,sBAE7B,GAAI,CAACS,GAAcA,GAAcD,EAAa,CAC5CE,EAAS,MAAM,CACb,MAAO,QACP,QAAS,sCACf,CAAK,EACD,MACD,CAEDC,EAAgBF,CAAU,EAE1B,cAAcF,CAAiB,EAE/BA,EAAoB,YAAY,IAAM,CACpCI,EAAgBF,CAAU,CAC3B,EAAE,GAAI,CACT,CAAC,EAED,SAASE,EAAgBF,EAAY,CAEnC,MAAMG,EAAWH,EADL,IAAI,KAGhB,GAAIG,GAAY,EAAG,CACjB,cAAcL,CAAiB,EAC/B,MACD,CAED,MAAMM,EAAO,KAAK,MAAMD,GAAY,IAAO,GAAK,GAAK,GAAG,EAClDE,EAAQ,KAAK,MAAOF,GAAY,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EACxEG,EAAU,KAAK,MAAOH,GAAY,IAAO,GAAK,KAAQ,IAAO,GAAG,EAChEI,EAAU,KAAK,MAAOJ,GAAY,IAAO,IAAO,GAAI,EAE1DT,EAAS,YAAc,OAAOU,CAAI,EAAE,SAAS,EAAG,GAAG,EACnDT,EAAU,YAAc,OAAOU,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDT,EAAY,YAAc,OAAOU,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDT,EAAY,YAAc,OAAOU,CAAO,EAAE,SAAS,EAAG,GAAG,CAC3D"}