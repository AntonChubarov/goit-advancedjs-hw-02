{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\n\nlet targetDate;\n\nconst options = {\n  enableTime: true, time_24hr: true, defaultDate: new Date(), minuteIncrement: 1, onClose(selectedDates) {\n    const currentDate = new Date();\n    targetDate = selectedDates[0];\n\n    if (!targetDate || targetDate <= currentDate) {\n      iziToast.error({\n        title: 'Error', message: 'Please select a future date and time',\n      });\n      return;\n    }\n\n    startButton.disabled = false;\n\n    console.log(selectedDates[0]);\n  },\n};\n\nconst dateInput = document.querySelector('#datetime-picker');\nflatpickr(dateInput, options);\n\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet countdownInterval;\n\nstartButton.addEventListener('click', () => {\n  const currentDate = new Date();\n\n  if (!targetDate || targetDate <= currentDate) {\n    iziToast.error({\n      title: 'Error', message: 'Please select a future date and time',\n    });\n\n    startButton.disabled = true;\n\n    return;\n  }\n\n  updateCountdown(targetDate);\n\n  clearInterval(countdownInterval);\n\n  countdownInterval = setInterval(() => {\n    updateCountdown(targetDate);\n  }, 1000);\n\n  startButton.disabled = true;\n  dateInput.disabled = true;\n});\n\nfunction updateCountdown(targetDate) {\n  const now = new Date();\n  const timeLeft = targetDate - now;\n\n  if (timeLeft <= 0) {\n    clearInterval(countdownInterval);\n\n    dateInput.disabled = false;\n\n    return;\n  }\n\n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n\n  daysSpan.textContent = String(days).padStart(2, '0');\n  hoursSpan.textContent = String(hours).padStart(2, '0');\n  minutesSpan.textContent = String(minutes).padStart(2, '0');\n  secondsSpan.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["startButton","targetDate","options","selectedDates","currentDate","iziToast","dateInput","flatpickr","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdownInterval","updateCountdown","timeLeft","days","hours","minutes","seconds"],"mappings":"+IAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GAEvB,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GAAM,UAAW,GAAM,YAAa,IAAI,KAAQ,gBAAiB,EAAG,QAAQC,EAAe,CACrG,MAAMC,EAAc,IAAI,KAGxB,GAFAH,EAAaE,EAAc,CAAC,EAExB,CAACF,GAAcA,GAAcG,EAAa,CAC5CC,EAAS,MAAM,CACb,MAAO,QAAS,QAAS,sCACjC,CAAO,EACD,MACD,CAEDL,EAAY,SAAW,GAEvB,QAAQ,IAAIG,EAAc,CAAC,CAAC,CAC7B,CACH,EAEMG,EAAY,SAAS,cAAc,kBAAkB,EAC3DC,EAAUD,EAAWJ,CAAO,EAE5B,MAAMM,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAEJZ,EAAY,iBAAiB,QAAS,IAAM,CAG1C,GAAI,CAACC,GAAcA,GAFC,IAAI,KAEsB,CAC5CI,EAAS,MAAM,CACb,MAAO,QAAS,QAAS,sCAC/B,CAAK,EAEDL,EAAY,SAAW,GAEvB,MACD,CAEDa,EAAgBZ,CAAU,EAE1B,cAAcW,CAAiB,EAE/BA,EAAoB,YAAY,IAAM,CACpCC,EAAgBZ,CAAU,CAC3B,EAAE,GAAI,EAEPD,EAAY,SAAW,GACvBM,EAAU,SAAW,EACvB,CAAC,EAED,SAASO,EAAgBZ,EAAY,CAEnC,MAAMa,EAAWb,EADL,IAAI,KAGhB,GAAIa,GAAY,EAAG,CACjB,cAAcF,CAAiB,EAE/BN,EAAU,SAAW,GAErB,MACD,CAED,MAAMS,EAAO,KAAK,MAAMD,GAAY,IAAO,GAAK,GAAK,GAAG,EAClDE,EAAQ,KAAK,MAAOF,GAAY,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EACxEG,EAAU,KAAK,MAAOH,GAAY,IAAO,GAAK,KAAQ,IAAO,GAAG,EAChEI,EAAU,KAAK,MAAOJ,GAAY,IAAO,IAAO,GAAI,EAE1DN,EAAS,YAAc,OAAOO,CAAI,EAAE,SAAS,EAAG,GAAG,EACnDN,EAAU,YAAc,OAAOO,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDN,EAAY,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDN,EAAY,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,CAC3D"}